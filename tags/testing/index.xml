<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Yury Fedorov</title>
    <link>https://fedorov.dev/tags/testing/</link>
    <description>Recent content in testing on Yury Fedorov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://fedorov.dev/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Kubernetes automation tools with Gnomock</title>
      <link>https://fedorov.dev/posts/2020-11-06-testing-kubernetes-automation-tools-gnomock/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fedorov.dev/posts/2020-11-06-testing-kubernetes-automation-tools-gnomock/</guid>
      <description>A recent Gnomock release v0.10.0 brought a new integration with it: k3s preset that allows integration testing of Kubernetes automation tools written in Go.
This new preset creates a docker container that runs a single node k3s (lightweight Kubernetes) cluster in it. It uses orlangure/k3s docker image that has many k3s versions available as tags.</description>
    </item>
    
    <item>
      <title>Integration testing of Go programs that use Kafka</title>
      <link>https://fedorov.dev/posts/2020-09-26-go-kafka-integration-testing-gnomock/</link>
      <pubDate>Sat, 26 Sep 2020 17:34:33 +0300</pubDate>
      
      <guid>https://fedorov.dev/posts/2020-09-26-go-kafka-integration-testing-gnomock/</guid>
      <description>Kafka message broker is a popular choice for Go programs that require high performance and great scalability. In this post I&amp;rsquo;m going to demonstrate an easy way to build integration tests for such applications. These tests won&amp;rsquo;t need any mocks: they use a real Kafka instance under the hood, giving the most confidence that everything works correctly.</description>
    </item>
    
    <item>
      <title>Code coverage in end-to-end/integration Go tests</title>
      <link>https://fedorov.dev/posts/2020-06-27-golang-end-to-end-test-coverage/</link>
      <pubDate>Sat, 27 Jun 2020 23:39:50 +0300</pubDate>
      
      <guid>https://fedorov.dev/posts/2020-06-27-golang-end-to-end-test-coverage/</guid>
      <description>I like writing integration tests for my Go code. They give me confidence that everything works as expected. This was one of the reasons I built Gnomock (an integration and end-to-end toolkit based on Docker): to easily write tests for code that uses databases or other external services, like AWS S3 or Splunk.</description>
    </item>
    
    <item>
      <title>Testing Go&#43;S3 with Gnomock and Localstack</title>
      <link>https://fedorov.dev/posts/2020-04-11-testing-go-s3-gnomock-localstack/</link>
      <pubDate>Sat, 11 Apr 2020 19:05:51 +0300</pubDate>
      
      <guid>https://fedorov.dev/posts/2020-04-11-testing-go-s3-gnomock-localstack/</guid>
      <description>A few months ago I built gompress: a simple utility that takes a location in AWS S3, compresses all the files in it with GZIP, and puts them in another location, also in S3, optionally keeping or removing the original files. It was something I wrote to use once on a large S3 bucket full of uncompressed CSV files, and published it for anyone else who might need it.</description>
    </item>
    
  </channel>
</rss>
